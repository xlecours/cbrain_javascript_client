/**
 * CBRAIN API
 * REST API for interacting with the CBRAIN Platform
 *
 * OpenAPI spec version: 5.0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CbrainApi);
  }
}(this, function(expect, CbrainApi) {
  'use strict';

  before(function(done) {
    const credentials = CbrainApi.ApiClient.instance.userCredentials;
    // This must run once before any other test in the whole testsuite.
    (new CbrainApi.SessionsApi())
      .sessionPost(credentials.login,credentials.password,function(error, data, response) {
        if (error) throw error;
        CbrainApi.ApiClient.instance.authentications.BrainPortalSession.apiKey = data.cbrain_api_token;
        done();
      }).timeout(5000); 
    // We could add a check to see if the user's password need to be reset. (Default behavior of a new vagrant image)
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SessionApi', function() {
    let instance;

    beforeEach(function() {
      instance = new CbrainApi.SessionsApi();
    });


    it('should call sessionGet successfully', function(done) {
      instance.sessionGet(function(error,data,response) {
        if (error) throw error;

        // The status code should be 200 
        expect(response.statusCode).to.be(200);
        // There should be a user_id property
        expect(data).to.have.property('user_id');
        // User id should be 1 
        expect(data.user_id).to.be(1);

        done();
      });
    }).timeout(5000);

    it('should call sessionDelete successfully', function(done) {
      instance.sessionDelete(function(error,data,response) {
        if (error) throw error;

        // The status code should be 200 
        expect(response.statusCode).to.be(200);
        // There should be no content in the response
        expect(data).to.be.null;

        done();
      });
    });

    it('should call sessionGet and receive a 401' , function(done) {
      instance.sessionGet(function(error,data,response) {
        // The status code should be 401 
        expect(error.status).to.be(401);
        done();
      });
    });

    it('should call sessionPost successfully', function(done) {
      const credentials = CbrainApi.ApiClient.instance.userCredentials;
      instance.sessionPost(credentials.login,credentials.password,function(error, data, response) {
        if (error) throw error;

        // The status code should be 200 
        expect(response.statusCode).to.be(200);
        // There should be a user_id property
        expect(data).to.have.property('user_id');
        // User id should be 1 
        expect(data.user_id).to.be(1);
        // There should be a cbrain_api_token property
        expect(data).to.have.property('cbrain_api_token');
        // The token should be an hexadecimal string
        expect(data.cbrain_api_token).to.match(/[a-f0-9]+/);

        done();
      });
    });

  });

}));
