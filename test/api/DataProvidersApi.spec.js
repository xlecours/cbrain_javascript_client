/**
 * CBRAIN API
 * REST API for interacting with the CBRAIN Platform
 *
 * OpenAPI spec version: 5.0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CbrainApi);
  }
}(this, function(expect, CbrainApi) {
  'use strict';

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DataProvidersApi', function() {
    let instance;

    beforeEach(function() {
      instance = new CbrainApi.DataProvidersApi();
    });

    it('should call dataProvidersGet successfully', function(done) {
      instance.dataProvidersGet(function(error, data, response) {
        if (error) throw error;
        // The status code should be 200
        expect(response.status).to.be(200);
        // The response body should be an array of length 4
        expect(data).to.be.a(Array);
        expect(data).to.have.length(4);
        // TODO :: Return type [DataProvider]
        done();
      });
    });

    it('should call dataProvidersIdBrowseGet and receive a 403', function(done) {
      instance.dataProvidersIdBrowseGet(1, function(error, data, response) {
        // The status code should be 403 
        // The GUI mentions that this DataProvider can't contain files.
        expect(error.status).to.be(403);
        done();
      });
    });

    it.skip('dataProvidersIdBrowseGet: There is no files to test', function(done) {
      // TODO :: dataProvidersIdBrowseGet
      // Return type [FileInfo]
    });

    it.skip('dataProvidersIdDeletePost: There is no files to test', function(done) {
      // TODO :: dataProvidersIdDeletePost
      // Return type null (empty response body)
    });

    it('should call dataProvidersIdGet successfully', function(done) {
      instance.dataProvidersIdGet(1, function(error, data, response) {
        if (error) throw error;
        expect(response.status).to.be(200);
        // TODO :: Return type DataProvider
        done();
      });
    });

    it('should call dataProvidersIdIsAliveGet successfully', function(done) {
      instance.dataProvidersIdIsAliveGet(4, function(error, data, response) {
        if (error) throw error;
        // The status code should be 200
        expect(response.status).to.be(200);
        // TODO :: Return type String 
        // TODO :: Remove the JSON parse by defining the return object in the swagger schema.
        expect(JSON.parse(data)).to.have.property('is_alive', true);
        done();
      });
    });

    it('should call dataProvidersIdRegisterPost successfully', function(done) {
      const id = 3;
      const basenames = ["basenames_example"];
      const filetypes = ["filetypes_example"];
      const authenticityToken = '';
      instance.dataProvidersIdRegisterPost(id, basenames, filetypes, authenticityToken, function(error ,data, response) {
        // The status code should be 200
        expect(response.status).to.be(200);
        // TODO :: Return type InlineResponse2002
        done();
      });
    });

    it('should call dataProvidersIdRegisterPost and receive a 403', function(done) {
      const id = 1;
      const basenames = ['basenames_example'];
      const filetypes = ['filetypes_example'];
      const authenticityToken = '';
      instance.dataProvidersIdRegisterPost(id, basenames, filetypes, authenticityToken, function(error ,data, response) {
        // The status code should be 403
        expect(response.status).to.be(403);
        expect(error.response.text).to.be('{"error":"You cannot register files from this provider."}');
        // TODO :: Return type InlineResponse2002
        done();
      });
    });

    it('should call dataProvidersIdUnregisterPost successfully', function(done) {
      const id = 3;
      const basenames = ['basenames_example']; // [String] | An array containing the filenames to unregister.
      const authenticityToken = ''; // String | The token returned by /session/new
      const opts = { 
        'asUserId': 1,
        '_delete': false // TODO :: dataProvidersIdUnregisterPost option:_delete:false is not working :: https://github.com/aces/cbrain/issues/623
      };
      instance.dataProvidersIdUnregisterPost(id, basenames, authenticityToken, opts, function(error, data, response) {
        if (error) throw error;
        expect(response.status).to.be(200);
        expect(data).to.be.null;
        done();
      });
    });
  });

}));
