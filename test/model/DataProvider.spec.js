/**
 * CBRAIN API
 * REST API for interacting with the CBRAIN Platform
 *
 * OpenAPI spec version: 5.0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CbrainApi);
  }
}(this, function(expect, CbrainApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CbrainApi.DataProvider();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DataProvider', function() {
    it('should create an instance of DataProvider', function() {
      // uncomment below and update the code to test DataProvider
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be.a(CbrainApi.DataProvider);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be();
    });

    it('should have the property groupId (base name: "group_id")', function() {
      // uncomment below and update the code to test the property groupId
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be();
    });

    it('should have the property online (base name: "online")', function() {
      // uncomment below and update the code to test the property online
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be();
    });

    it('should have the property readOnly (base name: "read_only")', function() {
      // uncomment below and update the code to test the property readOnly
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be();
    });

    it('should have the property timeOfDeath (base name: "time_of_death")', function() {
      // uncomment below and update the code to test the property timeOfDeath
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be();
    });

    it('should have the property notSyncable (base name: "not_syncable")', function() {
      // uncomment below and update the code to test the property notSyncable
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be();
    });

    it('should have the property timeZone (base name: "time_zone")', function() {
      // uncomment below and update the code to test the property timeZone
      //var instane = new CbrainApi.DataProvider();
      //expect(instance).to.be();
    });

  });

}));
