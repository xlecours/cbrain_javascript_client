/**
 * CBRAIN API
 * REST API for interacting with the CBRAIN Platform
 *
 * OpenAPI spec version: 5.0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CbrainApi) {
      root.CbrainApi = {};
    }
    root.CbrainApi.ToolConfig = factory(root.CbrainApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ToolConfig model module.
   * @module model/ToolConfig
   * @version 5.0.2
   */

  /**
   * Constructs a new <code>ToolConfig</code>.
   * @alias module:model/ToolConfig
   * @class
   */
  var exports = function() {
    var _this = this;










  };

  /**
   * Constructs a <code>ToolConfig</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ToolConfig} obj Optional instance to populate.
   * @return {module:model/ToolConfig} The populated <code>ToolConfig</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('version_name')) {
        obj['version_name'] = ApiClient.convertToType(data['version_name'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('tool_id')) {
        obj['tool_id'] = ApiClient.convertToType(data['tool_id'], 'Number');
      }
      if (data.hasOwnProperty('bourreau_id')) {
        obj['bourreau_id'] = ApiClient.convertToType(data['bourreau_id'], 'Number');
      }
      if (data.hasOwnProperty('env_array')) {
        obj['env_array'] = ApiClient.convertToType(data['env_array'], ['String']);
      }
      if (data.hasOwnProperty('script_prologue')) {
        obj['script_prologue'] = ApiClient.convertToType(data['script_prologue'], 'String');
      }
      if (data.hasOwnProperty('group_id')) {
        obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
      }
      if (data.hasOwnProperty('ncpus')) {
        obj['ncpus'] = ApiClient.convertToType(data['ncpus'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Unique numerical ID for the ToolConfig.
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * the version name of the tool's configuration
   * @member {String} version_name
   */
  exports.prototype['version_name'] = undefined;
  /**
   * a description of the configuration
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * the ID of the tool associated with this configuration
   * @member {Number} tool_id
   */
  exports.prototype['tool_id'] = undefined;
  /**
   * The ID of the execution server where this tool configuration is available. 
   * @member {Number} bourreau_id
   */
  exports.prototype['bourreau_id'] = undefined;
  /**
   * additional environment variables
   * @member {Array.<String>} env_array
   */
  exports.prototype['env_array'] = undefined;
  /**
   * A piece of bash script configured by the administrator to run before the tool is launched. 
   * @member {String} script_prologue
   */
  exports.prototype['script_prologue'] = undefined;
  /**
   * the ID of the project controlling access to this ToolConfig
   * @member {Number} group_id
   */
  exports.prototype['group_id'] = undefined;
  /**
   * A hint at how many CPUs the CBRAIN task will allocate to run this tool configuration 
   * @member {Number} ncpus
   */
  exports.prototype['ncpus'] = undefined;



  return exports;
}));


