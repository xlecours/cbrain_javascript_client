/**
 * CBRAIN API
 * Interface to control CBRAIN operations
 *
 * OpenAPI spec version: 4.5.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'));
  } else {
    // Browser globals (root is window)
    if (!root.CbrainApi) {
      root.CbrainApi = {};
    }
    root.CbrainApi.SessionsApi = factory(root.CbrainApi.ApiClient, root.CbrainApi.InlineResponse200, root.CbrainApi.InlineResponse2001, root.CbrainApi.InlineResponse2002);
  }
}(this, function(ApiClient, InlineResponse200, InlineResponse2001, InlineResponse2002) {
  'use strict';

  /**
   * Sessions service.
   * @module api/SessionsApi
   * @version 4.5.1
   */

  /**
   * Constructs a new SessionsApi. 
   * @alias module:api/SessionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the sessionDelete operation.
     * @callback module:api/SessionsApi~sessionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroy the session
     * This destroys the current session, effectively terminating the API&#39;s access to the service. 
     * @param {module:api/SessionsApi~sessionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sessionDelete = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/session', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionGet operation.
     * @callback module:api/SessionsApi~sessionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get session information
     * This returns information about the current session. 
     * @param {module:api/SessionsApi~sessionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.sessionGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/session', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionNewGet operation.
     * @callback module:api/SessionsApi~sessionNewGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * New session initiator
     * This returns an object with the information necessary to create a new session. 
     * @param {module:api/SessionsApi~sessionNewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.sessionNewGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/session/new', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionPost operation.
     * @callback module:api/SessionsApi~sessionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new session
     * This is the main entry point to create a CBRAIN session. Note that if a user is currently logged in, a new session will not be available to be created, and the current session will be re-used. 
     * @param {String} login The username of the User trying to connect.
     * @param {String} password The CBRAIN User&#39;s password
     * @param {String} authenticityToken The token returned by /session/new
     * @param {module:api/SessionsApi~sessionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.sessionPost = function(login, password, authenticityToken, callback) {
      var postBody = null;

      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling sessionPost");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling sessionPost");
      }

      // verify the required parameter 'authenticityToken' is set
      if (authenticityToken === undefined || authenticityToken === null) {
        throw new Error("Missing the required parameter 'authenticityToken' when calling sessionPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'login': login,
        'password': password,
        'authenticity_token': authenticityToken
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/session', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
