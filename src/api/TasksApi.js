/**
 * CBRAIN API
 * Interface to control CBRAIN operations
 *
 * OpenAPI spec version: 4.5.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CbrainTask', 'model/Parameters'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CbrainTask'), require('../model/Parameters'));
  } else {
    // Browser globals (root is window)
    if (!root.CbrainApi) {
      root.CbrainApi = {};
    }
    root.CbrainApi.TasksApi = factory(root.CbrainApi.ApiClient, root.CbrainApi.CbrainTask, root.CbrainApi.Parameters);
  }
}(this, function(ApiClient, CbrainTask, Parameters) {
  'use strict';

  /**
   * Tasks service.
   * @module api/TasksApi
   * @version 4.5.1
   */

  /**
   * Constructs a new TasksApi. 
   * @alias module:api/TasksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the tasksGet operation.
     * @callback module:api/TasksApi~tasksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CbrainTask>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of Tasks.
     * This method returns the list of Tasks accessible to the current user. 
     * @param {module:api/TasksApi~tasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CbrainTask>}
     */
    this.tasksGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = [CbrainTask];

      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksIdDelete operation.
     * @callback module:api/TasksApi~tasksIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Task
     * Deletes a Task from CBRAIN.
     * @param {Number} id The ID number of the Task to delete.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authenticityToken The token returned by /session/new
     * @param {module:api/TasksApi~tasksIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.tasksIdDelete = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tasksIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'authenticity_token': opts['authenticityToken']
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tasks/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksIdGet operation.
     * @callback module:api/TasksApi~tasksIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information on a Task.
     * This method returns information on a Task, including its status, Task restartability and information on where the results are kept. 
     * @param {Number} id The ID number of the Task to delete.
     * @param {module:api/TasksApi~tasksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.tasksIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tasksIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tasks/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksIdPut operation.
     * @callback module:api/TasksApi~tasksIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update information on a Task.
     * This method updates information about a Task in CBRAIN. 
     * @param {Number} id The ID number of the Task to update.
     * @param {String} cbrainTaskDescription Description of the Task.
     * @param {String} authenticityToken The token returned by /session/new
     * @param {Object} opts Optional parameters
     * @param {Number} opts.cbrainTaskResultsDataProviderId ID of the DataProvider to store the results of the Task on. (default to 1)
     * @param {Number} opts.cbrainTaskUserId ID of the User the Task should be associated with.
     * @param {Number} opts.cbrainTaskGroupId ID of the Group the Task should be associated with. (default to 1)
     * @param {module:api/TasksApi~tasksIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.tasksIdPut = function(id, cbrainTaskDescription, authenticityToken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tasksIdPut");
      }

      // verify the required parameter 'cbrainTaskDescription' is set
      if (cbrainTaskDescription === undefined || cbrainTaskDescription === null) {
        throw new Error("Missing the required parameter 'cbrainTaskDescription' when calling tasksIdPut");
      }

      // verify the required parameter 'authenticityToken' is set
      if (authenticityToken === undefined || authenticityToken === null) {
        throw new Error("Missing the required parameter 'authenticityToken' when calling tasksIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'cbrain_task[results_data_provider_id]': opts['cbrainTaskResultsDataProviderId'],
        'cbrain_task[description]': cbrainTaskDescription,
        'cbrain_task[user_id]': opts['cbrainTaskUserId'],
        'cbrain_task[group_id]': opts['cbrainTaskGroupId'],
        'authenticity_token': authenticityToken
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tasks/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksPost operation.
     * @callback module:api/TasksApi~tasksPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Task.
     * This method allows the creation of a new Task. 
     * @param {module:model/Parameters} parameters 
     * @param {module:api/TasksApi~tasksPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.tasksPost = function(parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling tasksPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tasks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
