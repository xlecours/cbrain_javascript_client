/**
 * CBRAIN API
 * Interface to control CBRAIN operations
 *
 * OpenAPI spec version: 4.5.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Userfile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Userfile'));
  } else {
    // Browser globals (root is window)
    if (!root.CbrainApi) {
      root.CbrainApi = {};
    }
    root.CbrainApi.UserfilesApi = factory(root.CbrainApi.ApiClient, root.CbrainApi.Userfile);
  }
}(this, function(ApiClient, Userfile) {
  'use strict';

  /**
   * Userfiles service.
   * @module api/UserfilesApi
   * @version 4.5.1
   */

  /**
   * Constructs a new UserfilesApi. 
   * @alias module:api/UserfilesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the userfilesChangeProviderPost operation.
     * @callback module:api/UserfilesApi~userfilesChangeProviderPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves the Userfiles from their current Data Provider to a new one.
     * @param {Array.<Number>} fileIds The ID&#39;s of the Userfiles to be moved or copied to a new Data Provider.
     * @param {Number} dataProviderIdForMvCp The ID of the Data Provider to move or copy the files to.
     * @param {String} authenticityToken The token returned by /session/new
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.crushDestination Specifies whether to overwrite files on the destination Data Provider if a file already exists there with the same name (default to false)
     * @param {module:api/UserfilesApi~userfilesChangeProviderPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userfilesChangeProviderPost = function(fileIds, dataProviderIdForMvCp, authenticityToken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fileIds' is set
      if (fileIds === undefined || fileIds === null) {
        throw new Error("Missing the required parameter 'fileIds' when calling userfilesChangeProviderPost");
      }

      // verify the required parameter 'dataProviderIdForMvCp' is set
      if (dataProviderIdForMvCp === undefined || dataProviderIdForMvCp === null) {
        throw new Error("Missing the required parameter 'dataProviderIdForMvCp' when calling userfilesChangeProviderPost");
      }

      // verify the required parameter 'authenticityToken' is set
      if (authenticityToken === undefined || authenticityToken === null) {
        throw new Error("Missing the required parameter 'authenticityToken' when calling userfilesChangeProviderPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file_ids[]': this.apiClient.buildCollectionParam(fileIds, 'multi'),
        'data_provider_id_for_mv_cp': dataProviderIdForMvCp,
        'crush_destination': opts['crushDestination'],
        'authenticity_token': authenticityToken
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userfiles/change_provider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userfilesCompressPost operation.
     * @callback module:api/UserfilesApi~userfilesCompressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compresses many Userfiles each into their own GZIP archive.
     * @param {Array.<Number>} fileIds A list of Userfile ID numbers to compress.
     * @param {String} authenticityToken The token returned by /session/new
     * @param {module:api/UserfilesApi~userfilesCompressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userfilesCompressPost = function(fileIds, authenticityToken, callback) {
      var postBody = null;

      // verify the required parameter 'fileIds' is set
      if (fileIds === undefined || fileIds === null) {
        throw new Error("Missing the required parameter 'fileIds' when calling userfilesCompressPost");
      }

      // verify the required parameter 'authenticityToken' is set
      if (authenticityToken === undefined || authenticityToken === null) {
        throw new Error("Missing the required parameter 'authenticityToken' when calling userfilesCompressPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file_ids[]': this.apiClient.buildCollectionParam(fileIds, 'multi'),
        'authenticity_token': authenticityToken
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userfiles/compress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userfilesDeleteFilesPost operation.
     * @callback module:api/UserfilesApi~userfilesDeleteFilesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete several files that have been registered as Userfiles
     * @param {Array.<Number>} fileIds The ID numbers of the files to be deleted
     * @param {String} authenticityToken The token returned by /session/new
     * @param {module:api/UserfilesApi~userfilesDeleteFilesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userfilesDeleteFilesPost = function(fileIds, authenticityToken, callback) {
      var postBody = null;

      // verify the required parameter 'fileIds' is set
      if (fileIds === undefined || fileIds === null) {
        throw new Error("Missing the required parameter 'fileIds' when calling userfilesDeleteFilesPost");
      }

      // verify the required parameter 'authenticityToken' is set
      if (authenticityToken === undefined || authenticityToken === null) {
        throw new Error("Missing the required parameter 'authenticityToken' when calling userfilesDeleteFilesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file_ids[]': this.apiClient.buildCollectionParam(fileIds, 'multi'),
        'authenticity_token': authenticityToken
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userfiles/delete_files', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userfilesDownloadPost operation.
     * @callback module:api/UserfilesApi~userfilesDownloadPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download several files
     * This method compresses several Userfiles in .gz format and prepares them to be downloaded.
     * @param {String} authenticityToken The token returned by /session/new
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.fileIds The ID numbers of the files to be downloaded. If more than one file is specified, they will be zipped into a gzip archive.
     * @param {String} opts.specifiedFilename The name of the archive file that the Userfiles will be compressed into for downloading.
     * @param {module:api/UserfilesApi~userfilesDownloadPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userfilesDownloadPost = function(authenticityToken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authenticityToken' is set
      if (authenticityToken === undefined || authenticityToken === null) {
        throw new Error("Missing the required parameter 'authenticityToken' when calling userfilesDownloadPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file_ids[]': this.apiClient.buildCollectionParam(opts['fileIds'], 'multi'),
        'specified_filename': opts['specifiedFilename'],
        'authenticity_token': authenticityToken
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userfiles/download', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userfilesGet operation.
     * @callback module:api/UserfilesApi~userfilesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Userfile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of the Userfiles accessible to the current user.
     * This method returns a list of Userfiles that are available to the current User. 
     * @param {module:api/UserfilesApi~userfilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Userfile>}
     */
    this.userfilesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = [Userfile];

      return this.apiClient.callApi(
        '/userfiles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userfilesIdContentGet operation.
     * @callback module:api/UserfilesApi~userfilesIdContentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content of a Userfile
     * This method allows you to download Userfiles.
     * @param {Number} id The ID number of the Userfile to download
     * @param {module:api/UserfilesApi~userfilesIdContentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userfilesIdContentGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userfilesIdContentGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userfiles/{id}/content', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userfilesIdDelete operation.
     * @callback module:api/UserfilesApi~userfilesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Userfile.
     * This method allows a User to delete a Userfile. 
     * @param {Number} id The ID number of the Userfile to delete.
     * @param {String} authenticityToken The token returned by /session/new
     * @param {module:api/UserfilesApi~userfilesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userfilesIdDelete = function(id, authenticityToken, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userfilesIdDelete");
      }

      // verify the required parameter 'authenticityToken' is set
      if (authenticityToken === undefined || authenticityToken === null) {
        throw new Error("Missing the required parameter 'authenticityToken' when calling userfilesIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'authenticity_token': authenticityToken
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userfiles/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userfilesIdGet operation.
     * @callback module:api/UserfilesApi~userfilesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Userfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information on a Userfile.
     * This method returns information about a single Userfile, specified by its ID. Information returned includes the ID of the owner, the Group (project) it is a part of, a description, information about where the acutal copy of the file currently is, and what the status is of any synhronization operations that may have been requested. 
     * @param {Number} id The ID number of the Userfile to get information on.
     * @param {module:api/UserfilesApi~userfilesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Userfile}
     */
    this.userfilesIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userfilesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Userfile;

      return this.apiClient.callApi(
        '/userfiles/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userfilesIdPut operation.
     * @callback module:api/UserfilesApi~userfilesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update information on a Userfile.
     * This method allows a User to update information on a userfile. 
     * @param {Number} id The ID number of the Userfile to update.
     * @param {String} authenticityToken The token returned by /session/new
     * @param {Object} opts Optional parameters
     * @param {String} opts.userfileType Type of file that the Userfile is registered in CBRAIN as. This parameter affects what kinds of Tools can be used on the file. (default to SingleFile)
     * @param {Number} opts.userfileUserId ID of the user who owns the file. (default to 1)
     * @param {Number} opts.userfileGroupId ID of the group that will have access to the Userfile. (default to 1)
     * @param {Array.<Number>} opts.tagIds ID numbers of the tags that describe the Userfile.
     * @param {Boolean} opts.userfileGroupWritable Specifies whether other members of the group that owns the file can modify the Userfile.
     * @param {Boolean} opts.userfileHidden Specifies whether the Userfile is hidden or visible in the normal file listing. (default to false)
     * @param {Boolean} opts.userfileImmutable Specifies whether the Userfile can be modified. (default to false)
     * @param {String} opts.userfileDescription Description of the Userfile.
     * @param {module:api/UserfilesApi~userfilesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userfilesIdPut = function(id, authenticityToken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userfilesIdPut");
      }

      // verify the required parameter 'authenticityToken' is set
      if (authenticityToken === undefined || authenticityToken === null) {
        throw new Error("Missing the required parameter 'authenticityToken' when calling userfilesIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'userfile[type]': opts['userfileType'],
        'userfile[user_id]': opts['userfileUserId'],
        'userfile[group_id]': opts['userfileGroupId'],
        'tag_ids[]': this.apiClient.buildCollectionParam(opts['tagIds'], 'multi'),
        'userfile[group_writable]': opts['userfileGroupWritable'],
        'userfile[hidden]': opts['userfileHidden'],
        'userfile[immutable]': opts['userfileImmutable'],
        'userfile[description]': opts['userfileDescription'],
        'authenticity_token': authenticityToken
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userfiles/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userfilesPost operation.
     * @callback module:api/UserfilesApi~userfilesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Userfile.
     * This method creates a new Userfile in CBRAIN, with the current user as the owner of the file. 
     * @param {File} uploadFile File to upload to CBRAIN
     * @param {Number} dataProviderId The ID of the Data Provider to upload the file to.
     * @param {Number} userfileGroupId ID of the group that will have access to the Userfile
     * @param {String} fileType The type of the file
     * @param {String} authenticityToken The token returned by /session/new
     * @param {Object} opts Optional parameters
     * @param {String} opts.archive Archive
     * @param {String} opts.upExMode usually \&quot;collection\&quot;
     * @param {module:api/UserfilesApi~userfilesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userfilesPost = function(uploadFile, dataProviderId, userfileGroupId, fileType, authenticityToken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uploadFile' is set
      if (uploadFile === undefined || uploadFile === null) {
        throw new Error("Missing the required parameter 'uploadFile' when calling userfilesPost");
      }

      // verify the required parameter 'dataProviderId' is set
      if (dataProviderId === undefined || dataProviderId === null) {
        throw new Error("Missing the required parameter 'dataProviderId' when calling userfilesPost");
      }

      // verify the required parameter 'userfileGroupId' is set
      if (userfileGroupId === undefined || userfileGroupId === null) {
        throw new Error("Missing the required parameter 'userfileGroupId' when calling userfilesPost");
      }

      // verify the required parameter 'fileType' is set
      if (fileType === undefined || fileType === null) {
        throw new Error("Missing the required parameter 'fileType' when calling userfilesPost");
      }

      // verify the required parameter 'authenticityToken' is set
      if (authenticityToken === undefined || authenticityToken === null) {
        throw new Error("Missing the required parameter 'authenticityToken' when calling userfilesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'upload_file': uploadFile,
        'data_provider_id': dataProviderId,
        'userfile[group_id]': userfileGroupId,
        'file_type': fileType,
        'archive': opts['archive'],
        'authenticity_token': authenticityToken,
        '_up_ex_mode': opts['upExMode']
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userfiles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userfilesSyncMultiplePost operation.
     * @callback module:api/UserfilesApi~userfilesSyncMultiplePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Syncs Userfiles to their Data Providers&#39; cache.
     * Synchronizing files to their Data Providers&#39; caches allows you to download, visualize and do processing on them that is not available if not synced. CBRAIN operations will sync files automatically, and this is only necessary if a file is changed on its host Data Provdier by an external process.
     * @param {Array.<Number>} fileIds A list of Userfile ID numbers to synchronize.
     * @param {String} authenticityToken The token returned by /session/new
     * @param {Object} opts Optional parameters
     * @param {String} opts.operation Either \&quot;sync_local\&quot; or \&quot;all_newer\&quot;. \&quot;sync_local\&quot; will ensure that the version of the file in the CBRAIN portal cache is the most recent version that exists on the Data Provider. \&quot;all_newer\&quot; will ensure that ALL caches known to CBRAIN are updated with the most recent version of the files in the host Data Provider. (default to sync_local)
     * @param {module:api/UserfilesApi~userfilesSyncMultiplePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userfilesSyncMultiplePost = function(fileIds, authenticityToken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fileIds' is set
      if (fileIds === undefined || fileIds === null) {
        throw new Error("Missing the required parameter 'fileIds' when calling userfilesSyncMultiplePost");
      }

      // verify the required parameter 'authenticityToken' is set
      if (authenticityToken === undefined || authenticityToken === null) {
        throw new Error("Missing the required parameter 'authenticityToken' when calling userfilesSyncMultiplePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file_ids[]': this.apiClient.buildCollectionParam(fileIds, 'multi'),
        'operation': opts['operation'],
        'authenticity_token': authenticityToken
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userfiles/sync_multiple', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userfilesUncompressPost operation.
     * @callback module:api/UserfilesApi~userfilesUncompressPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uncompresses many Userfiles.
     * @param {Array.<Number>} fileIds A list of Userfile ID numbers to uncompress.
     * @param {String} authenticityToken The token returned by /session/new
     * @param {module:api/UserfilesApi~userfilesUncompressPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userfilesUncompressPost = function(fileIds, authenticityToken, callback) {
      var postBody = null;

      // verify the required parameter 'fileIds' is set
      if (fileIds === undefined || fileIds === null) {
        throw new Error("Missing the required parameter 'fileIds' when calling userfilesUncompressPost");
      }

      // verify the required parameter 'authenticityToken' is set
      if (authenticityToken === undefined || authenticityToken === null) {
        throw new Error("Missing the required parameter 'authenticityToken' when calling userfilesUncompressPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file_ids[]': this.apiClient.buildCollectionParam(fileIds, 'multi'),
        'authenticity_token': authenticityToken
      };

      var authNames = ['BrainPortalSession'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userfiles/uncompress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
